var Store = require('./store');
var defer = setImmediate;

//Initialize a new `MemoryStore`.
function MemoryStore() {
    this.sessions = {}; //数据表
};
//Inherit from `Store.prototype`.
MemoryStore.prototype.__proto__ = Store.prototype;

// Attempt to fetch session by the given `sid`.
//根据sid获取内存(DB)中的数据
//数据库 查询
MemoryStore.prototype.get = function (sid, fn) {
    var self = this;
    var sess = self.sessions[sid];

    if (!sess) {
        return defer(fn);
    }

    // parse
    sess = JSON.parse(sess);

    var expires = typeof sess.cookie.expires === 'string'
        ? new Date(sess.cookie.expires)
        : sess.cookie.expires;

    // destroy expired session
    if (expires && expires <= Date.now()) {
        return self.destroy(sid, fn);
    }

    defer(fn, null, sess);
};

//Commit the given `sess` object associated with the given `sid`.
//数据库 修改
MemoryStore.prototype.set = function (sid, sess, fn) {
    this.sessions[sid] = JSON.stringify(sess);
    fn && defer(fn);
};

//Destroy the session associated with the given `sid`.
//数据库 删除

MemoryStore.prototype.destroy = function (sid, fn) {
    delete this.sessions[sid];
    fn && defer(fn);
};

//Invoke the given callback `fn` with all active sessions.
MemoryStore.prototype.all = function (fn) {
    var arr = []
        , keys = Object.keys(this.sessions);
    for (var i = 0, len = keys.length; i < len; ++i) {
        arr.push(this.sessions[keys[i]]);
    }
    fn && defer(fn);
};

//Clear all sessions.
MemoryStore.prototype.clear = function (fn) {
    this.sessions = {};
    fn && defer(fn);
};

//Fetch number of sessions.
MemoryStore.prototype.length = function (fn) {
    var len = Object.keys(this.sessions).length;
    defer(fn, null, len);
};
module.exports = MemoryStore;
